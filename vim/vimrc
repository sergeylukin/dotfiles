" Forget compatibility with VI 
set nocompatible

" Make buffer modifiable
" https://stackoverflow.com/questions/5745506/vim-modifiable-is-off
set modifiable

" set nolist
"set nofixendofline

"----------------------"
" Encoding {{{
"----------------------"
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}


"----------------------"
" Filetype {{{
"----------------------"
filetype off
filetype indent on
filetype plugin on
syntax on
set re=0
" }}}

" highlight ColorColumn ctermbg=cyan ctermfg=blue
" call matchadd('ColorColumn', '\%81v', 100)

"-----------------------------"
" Abbreviations and Shortcuts {{{
"-----------------------------"
" Override <leader> defaults
let mapleader = ","
let maplocalleader = ","
" Lower the timeout after typing the leader key + command
set timeoutlen=500

" ABBREVIATIONS - commands typed in CLI (after colon)
" -------------------------------
" Open current file in Firefox - syntax may differ from one OS to another
abbrev ff :!firefox % &<cr>

" IMAPS - Insert mode shortcuts
" -------------------------------
" Shortcut for ESC
imap jj <esc>

" NMAPS - Normal Mode shortcuts
" -------------------------------
" let semi-colon function as colon (switch to command mode)
nmap ; :
" fast .VIMRC edit
nmap <leader>ev :tabedit $MYVIMRC<cr>
" reload .VIMRC without restarting VIM
nmap <leader>so :so $MYVIMRC<cr>
" Quickly cancel highlighted selection
nmap <leader>h :nohlsearch<cr>
" Reload files
nmap <leader>r :checktime<cr>

nnoremap gf <C-W>gf
vnoremap gf <C-W>gf

" Disable arrow keys to improve moving around with h,j,k,l
" Taken from http://bit.ly/10Fvzgn
inoremap <Up> <NOP>
vnoremap <Up> <NOP>
inoremap <Down> <NOP>
vnoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
vnoremap <Left> <NOP>
vnoremap <Right> <NOP>
" B-A-<start> almost a Konami code:)

" Override read-only permissions with sudo password
cmap w!! %!sudo tee > /dev/null %

" Prevent from entering Ex mode
nnoremap Q <nop>

map <Leader>p :set paste<CR>o<ESC>"*]p:set nopaste<CR>

" }}}


"----------------------"
" Files & Buffers {{{
"----------------------"
" Write the old file when switching between files
set autowrite
" Switch between buffers without saving
set hidden
" No swap files
set noswapfile
" File names auto-completion
"   first TAB completes as much as possible
"   second TAB provides a list
"   third and subsequent will cycle through completion options
set wildmode=longest,list,full
set wildmenu
" Automatically change current directory to that of the file in the buffer
autocmd BufEnter * silent! lcd %:p:h " Better alternative to `autochdir`
" Custom Filetypes
au BufNewFile,BufRead *.less, set filetype=css " Recognize .less files as .css
au BufNewFile,BufRead *.scss set filetype=css " Recognize .scss files as .css
au BufNewFile,BufRead *.mdx set filetype=mdx

" Spellcheck me
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown,md,mdx setlocal spell

" au BufNewFile,BufRead *.mdx set filetype=mdx
" Shortcut for deleting all buffers
nmap <silent> <leader>da :exec "1," . bufnr('$') . "bd"<cr>
" Force spell check when writing a git commit
" source: https://coderwall.com/p/kxps6g
if  bufname("%")=="COMMIT_EDITMSG"
  set spell 
  set spelllang=en
endif
" }}}


"----------------------"
" UI stuff {{{
"----------------------"
set t_Co=256 " Enable 256 colors mode
" Select colorscheme from ~/.vim/colors/
" if has('gui_running')
"   colorscheme solarized
set background=dark " Used by some colorschemes (for example Solarized theme may be 'dark' or 'light')
" else
"   colorscheme dante
" endif
let &t_ut=''
" Show lines numbers
set number
" use cursor relative line numbers
set relativenumber
" use unit file format for all files
set ffs=unix,dos
set ff=unix
" show whitespace characters (tabs and line endings)
set list
" customize the way whitespace characters are shown
set listchars=tab:..,trail:_,extends:>,precedes:<,nbsp:~
"set relativenumber " Relative line numbering, works in VIM version 7.3 and higher
set linespace=3 " Higher line height - works only in GUI mode, not in terminal..
set laststatus=2 " Show status line
" Customize statusline: [Filename] [Filetype] [GIT] [Cursor Line,Column]
set statusline=%t\ %y\ %{fugitive#statusline()}\ [%l,%c]
" Show additional helpful info (like number of selected lines) in the bottom right of the screen
set showcmd
" Keep current screen unmoved when creating new split screen
set splitbelow
set splitright
" Highlight the paired characters if one of them is under the cursor (like
" braces)
set showmatch
" Ignore case sensitivity when searching
set ignorecase
" Don't ignore case sensitivity when search pattern contains capital letters
set smartcase
" Add /g flag in search and replace by default
set gdefault
" Set incremental search - search when you type, very cool
set incsearch
" Highlight search - looks like it is enabled by default, but anyways
set hlsearch " use :nohlsearch to cancel highlighted selection
" Hide mouse when typing
set mousehide
" Let mouse text selecting be aware of splits so that only text in
" current split is selected
set mouse=a
" Flash screen instead of beeping
set visualbell
" Highlight current line
set cursorline
" Have some lines above/below the cursor when hitting the top or the bottom
" edge of the screen while scrolling
" source: https://coderwall.com/p/m6zz_w
set scrolloff=5

" Set font for graphical vim
set guifont=Monaco:h18
" Remove all toolbars/scrollbars from GUI version
set guioptions=aAc
set guioptions-=Be
set guioptions-=T
" Non-blinking, block cursor
set guicursor=a:blinkwait0,a:block-cursor

" Resize windows when switching between them
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999
" }}}


"----------------------"
" Indentation & Wrap {{{
"----------------------"
set backspace=2 " make backspace work like most other apps
" make sure we can navigate very long lines as expected
nnoremap j gj
nnoremap k gk
" make sure we can indent blocks easily, enter Visual mode, select text block
" and press '>' and '<' as much as you need to indent it
vnoremap < <gv
vnoremap > >gv
" Hard-wrap paragraphs of text - very useful when pasting long lines
nnoremap <leader>q gqip
" Indentation
" Insert space characters whenever TAB pressed (use Ctrl-V<Tab> to insert real TAB)
set expandtab 
set tabstop=2 " number of spaces when TAB pressed
set shiftwidth=2
set softtabstop=2
set expandtab
set smartindent
set autoindent
" Line wrapping
set wrap
set textwidth=79
set formatoptions=cqtl
set wrapmargin=0
set linebreak
" }}}


"----------------------"
" Folding {{{
"----------------------"
set foldenable
" Use fold-marker method
set foldmethod=marker
set foldmarker={{{,}}}
set foldtext=getline(v:foldstart)
" Save only fold info in views
set viewoptions=folds
" Auto-save the folds when saving file
au BufWinLeave * silent! mkview
" Auto-load the fold when opening file
au BufWinEnter * silent! loadview
" Fold GPG entries by default
autocmd BufWinEnter,BufReadPre,FileReadPre      *.gpg normal zM
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.
autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
autocmd InsertLeave * let &l:foldmethod=w:last_fdm
" }}}


"----------------------"
" Code completion {{{
"----------------------"
imap <Tab> <C-n>
imap <S-Tab> <C-p>
" imap <leader><tab> <C-x><C-o>
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" set completeopt=longest,menuone
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
"   \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
"   \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" }}}


"---------------------------"
" Vundle - Plugins manager {{{
"---------------------------"
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.
" }}}

"---------------------------"
" Vundles {{{
"---------------------------"

" Neat theme
" Bundle 'dracula/vim'
" color dracula

" .eslint
" https://medium.com/@jimeno0/eslint-and-prettier-in-vim-neovim-7e45f85cf8f9
" Bundle 'dense-analysis/ale'
" let g:ale_fixers = {
"  \ 'javascript': ['prettier', 'eslint'],
"  \ 'mdx': ['prettier', 'eslint']
"  \ }
" let g:ale_sign_error = '❌'
" let g:ale_sign_warning = '⚠️'
" let g:ale_fix_on_save = 1
" let g:ale_open_list = 1

" PHP-CS-Fixer VIM plugin
" Correct visual representation of code according to PSR standards
"
" To activate press <leader>pcd
"
" For more details:
" https://github.com/stephpy/vim-php-cs-fixer
"
Bundle 'stephpy/vim-php-cs-fixer'
" Change default mapping to <leader>ff and <leader>fd
let g:php_cs_fixer_enable_default_mapping = 0
nnoremap <silent><leader>fd :call PhpCsFixerFixDirectory()<CR>
nnoremap <silent><leader>ff :call PhpCsFixerFixFile()<CR>
" }}}


" Source Vim configuration file and install plugins
nnoremap <silent><leader>1 :source ~/.vimrc \| :PlugInstall<CR>

"---------------------------"
" Plug
" https://github.com/junegunn/vim-plug {{{
"---------------------------"
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
      \| PlugInstall --sync | source $MYVIMRC
      \| endif
" }}}

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation `Plug '{USER}/{REPO}' - fetches
" https://github.com/{USER}/{REPO}

Plug 'Rigellute/shades-of-purple.vim'
Plug 'cocopon/iceberg.vim'
Plug 'joshdick/onedark.vim'



Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax
Plug 'wuelnerdotexe/vim-astro'    " Astro.build syntax
let g:astro_typescript = 'enable'
" Plug 'jparise/vim-graphql'        " GraphQL syntax

Plug 'tomtom/tcomment_vim'
map <leader>c <C-_><C-_>

Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.javascriptreact = ['javascript']
let g:vsnip_filetypes.typescriptreact = ['typescript']

"---------------------------"
" Plug - File types {{{
" Support JS/JSX highlighting etc.
Plug 'sheerun/vim-polyglot'
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
" Used previously:
" Plug 'yuezk/vim-js'
" Plug 'maxmellon/vim-jsx-pretty'


Plug 'editorconfig/editorconfig-vim'

" Plug 'jxnblk/vim-mdx-js'
Plug 'pappasam/vim-filetype-formatter'
Plug 'TovarishFin/vim-solidity'
" ~/.vimrc
nnoremap <silent> <leader>p :FiletypeFormat<cr>
vnoremap <silent> <leader>p :FiletypeFormat<cr>

" }}}

"---------------------------"
" Plug - file formtting (Prettier, etc.) {{{
" Prettier
" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-graphql',
      \ 'coc-json',
      \ 'coc-prisma',
      \ 'coc-explorer',
      \ 'coc-solidity'
      \ ]
nmap <space>e <Cmd>CocCommand explorer<CR>
nmap <space>] <Cmd>CocCommand explorer --preset buffer<CR>
" use <tab> for trigger completion and navigate to the next complete item
nmap <leader>i :CocCommand tsserver.organizeImports<cr>
" use <c-space>for trigger completion
inoremap <silent><expr> <c-q> coc#refresh()

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif
command! -nargs=0 Prettier :CocCommand prettier.formatFile

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif
let g:coc_filetype_map = { 'markdown.mdx': 'mdx' }
" Find all occurrences in project
nnoremap <leader>prw :CocSearch <C-R>=expand("<cword>")<CR><CR>

" The following are just some of the suggested settings from CoC's README.md {{{

set shortmess+=c

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

set omnifunc=syntaxcomplete#Complete
set complete-=i
set complete-=t

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

Plug 'pantharshit00/vim-prisma'

Plug 'neoclide/coc-highlight', {'branch': 'release'} " color highlighting

" jump to next/prev error
nmap <silent> <Leader>j <Plug>(coc-diagnostic-next-error)
nmap <silent> <Leader>k <Plug>(coc-diagnostic-prev-error)

" Plug 'dense-analysis/ale'
" let g:ale_linters_explicit = 1
" let g:ale_fixers = {
"  \ 'mdx': ['prettier', 'eslint']
"  \ }
" let g:ale_sign_error = '❌'
" let g:ale_sign_warning = '⚠️'
" let g:ale_fix_on_save = 1
" let g:ale_open_list = 1

" post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'for': ['html'] }
let g:prettier#autoformat_config_present = 1
let g:prettier#autoformat_require_pragma = 0
nmap <Leader>py <Plug>(Prettier)
" }}}

" Rooter changes the working directory to the project root when you open a file or directory.
" It's required for Files search and Find in files features to allow
" project-wide search
" Plug 'airblade/vim-rooter'


"---------------------------"
" Plug - fuzzy search {{{
" Fuzzy search

Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = '\v[\/](\.git|node_modules|.*\-static|dist|build)$'
" Bust ctrlp cache and open search dialog
" basically cache-busting replacement for <leader>f
" See more details here:
" https://stackoverflow.com/a/40029712/1832729
nnoremap <c-p> :CtrlPClearCache<bar>CtrlP<cr>
let g:ctrlp_show_hidden = 1
nnoremap <Leader>fr :CtrlPClearCache<CR>
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" let g:ctrlp_user_command = 'find %s -type f'


" FZF - search in files
Plug 'mileszs/ack.vim'
" Use ripgrep for searching ⚡️
" Options include:
" --vimgrep -> Needed to parse the rg response properly for ack.vim
" --type-not sql -> Avoid huge sql file dumps as it slows down the search
" --smart-case -> Search case insensitive if all lowercase pattern, Search case sensitively otherwise
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'

" Auto close the Quickfix list after pressing '<enter>' on a list item
let g:ack_autoclose = 1

" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Don't jump to first match
cnoreabbrev Ack Ack!

" Maps <leader>/ so we're ready to type the search keyword
nnoremap <Leader>/ :Gcd <bar> Ack!<Space>
noremap <Leader>a :Gcd <bar> Ack!<Space><cword><cr>

" open new files from quickfix window in new tab 
set switchbuf+=usetab,newtab

" Navigate quickfix list with ease
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>

set rtp+=/usr/local/opt/fzf
" }}}


"---------------------------"
" Plug - git {{{
Plug 'tpope/vim-fugitive'
" Fugitive Conflict Resolution
" nnoremap <leader>gd :Gvdiffsplit!<CR>
" nnoremap gdh :diffget 4<CR>
" nnoremap gdl :diffget 6<CR>
" nmap <leader>gs :G<CR>
" set diffopt=filler,context:4

Plug 'christoomey/vim-conflicted'
" }}}

"---------------------------"
" Plug - sessions {{{
" Auto save sessions
Plug 'tpope/vim-obsession'
let g:sessions_dir = '~/vim-sessions'

" Remaps for Sessions
exec 'nnoremap <Leader>ss :Obsession ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'
nnoremap <Leader>sp :Obsession<CR>

" Our custom TabLine function
function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

    let s .= '%=' " Right-align after this

    if exists('g:this_obsession')
        let s .= '%#diffadd#' " Use the "DiffAdd" color if in a session
    endif

    " add vim-obsession status if available
    if exists(':Obsession')
        let s .= "%{ObsessionStatus()}"
        if exists('v:this_session') && v:this_session != ''
            let s:obsession_string = v:this_session
            let s:obsession_parts = split(s:obsession_string, '/')
            let s:obsession_filename = s:obsession_parts[-1]
            let s .= ' ' . s:obsession_filename . ' '
            let s .= '%*' " Restore default color
        endif
    endif

  return s
endfunction

" Required for MyTabLine()
function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname(buflist[winnr - 1])
endfunction

set tabline=%!MyTabLine()
set showtabline=1
" }}}

"---------------------------"
" Plug - Babel {{{
Plug 'jbgutierrez/vim-babel'
Plug 'mattn/webapi-vim'
" }}}

"---------------------------"
" Plug - DocumentGenerator {{{
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
" }}}

Plug 'guns/xterm-color-table.vim', {'branch': 'release'}

Plug 'ernstwi/vim-secret'
nmap <leader>se <Plug>SecretToggle

" Initialize plugin system
call plug#end()

syn match MyPassword /\%(^\s*pass:\s*\)\@<=\S\+/ conceal cchar=*
setl conceallevel=2 concealcursor=nv


"---------------------------"
" Pathogen - Plugins manager {{{
"---------------------------"
call pathogen#infect()
" }}}

"----------------------"
" PLUGIN - NERDTree {{{
"----------------------"
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeHightlightCursorline=1
let NERDTreeShowHidden=1 " Show hidden files
" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>
" }}}

"----------------------"
" PLUGIN - Sparkup (zencoding) {{{
"----------------------"
let g:sparkup = 'sparkup'
let g:sparkupArgs = '--no-last-newline'
let g:sparkupExecuteMapping = '<leader>e'
let g:sparkupNextMapping = '<C-n>'
" }}}

"----------------------"
" PLUGIN - taglist {{{
"----------------------"
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
let Tlist_Inc_Winwidth=0
" }}}

"----------------------"
" PLUGIN - RSpec {{{
"----------------------"
map <leader>s :RunSpec<cr>
" }}}

"----------------------"
" Markdown {{{
"----------------------"
" Markdown to HTML - make sure to download Markdown.pl to /usr/local/bin
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags<cr>
" }}}

" Any local customizations should be made in .vimrc.local file
" you would most likely create .vimrc.local in the same dir with your $MYVIMRC file
let $VIMHOME=expand('<sfile>:p:h')
if filereadable(expand('$VIMHOME/.vimrc.local'))
  source $VIMHOME/.vimrc.local
endif

" Console log from insert mode; Puts focus inside parentheses
imap cll console.log();<Esc>==f(a
" Console log from visual mode on next line, puts visual selection inside parentheses
vmap cll yocll<Esc>p
" Console log from normal mode, inserted on next line with word your on inside parentheses
map cll yiwocll<Esc>p

" Colors
"""" enable 24bit true color
" If you have vim >=8.0 or Neovim >= 0.1.5
 set termguicolors
if (has("termguicolors"))
 set termguicolors
endif
function! IcebergColorsCustomization() abort
  " Makes the floating window more readable
  highlight Pmenu ctermbg=237 ctermfg=white
  highlight PmenuSel ctermbg=220 ctermfg=black
  highlight PmenuSbar ctermbg=233
  highlight PmenuThumb ctermbg=7

  highlight CocHighlightText term=underline cterm=underline ctermbg=117  ctermfg=17 gui=underline guibg=#cccccc guifg=#1E1E3F
  highlight CocHighlightRead term=underline cterm=underline ctermbg=117  ctermfg=17 gui=underline guibg=#cccccc guifg=#1E1E3F
  highlight CocWarningHighlight term=underline cterm=underline ctermbg=LightBlue  ctermfg=DarkGreen gui=underline guibg=#cccccc guifg=#1E1E3F
  highlight CocWarningLine term=underline cterm=underline ctermbg=182 ctermfg=53 gui=underline guibg=NONE guifg=#FF0000
  highlight CocWarningSign term=underline cterm=underline ctermbg=NONE  ctermfg=red  gui=underline guibg=NONE guifg=#FF0000
  highlight CursorLine term=underline cterm=underline ctermbg=NONE  ctermfg=NONE  gui=underline guibg=NONE guifg=#FF0000
  highlight Normal ctermbg=None ctermfg=252 guibg=#161821 guifg=#c6c8d1
  highlight Visual ctermbg=197 ctermfg=252 guibg=#161821 guifg=#c6c8d1
  highlight LineNr ctermbg=234 ctermfg=9
endfunction

function! OnedarkColorsCustomization() abort
  highlight LineNr ctermbg=234 ctermfg=9
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme iceberg call IcebergColorsCustomization()
    autocmd ColorScheme onedark call OnedarkColorsCustomization()
augroup END
"""" enable the theme
"colorscheme onedark
"colorscheme iceberg
colorscheme lucius
autocmd CursorHold * silent call CocActionAsync('highlight')

autocmd MyColors BufWritePost $MYVIMRC nested source $MYVIMRC

" Apply new configuration after .VIMRC is saved
autocmd! BufWritePost .vimrc tabdo source $MYVIMRC













" Returns true if the color hex value is light
function! IsHexColorLight(color) abort
  let l:raw_color = trim(a:color, '#')

  let l:red = str2nr(substitute(l:raw_color, '(.{2}).{4}', '1', 'g'), 16)
  let l:green = str2nr(substitute(l:raw_color, '.{2}(.{2}).{2}', '1',
  'g'), 16)
  let l:blue = str2nr(substitute(l:raw_color, '.{4}(.{2})', '1', 'g'),
  16)

  let l:brightness = ((l:red * 299) + (l:green * 587) + (l:blue *
  114)) / 1000

  return l:brightness > 155
endfunction
